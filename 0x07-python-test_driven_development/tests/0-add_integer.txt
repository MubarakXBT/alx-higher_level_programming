
=============================
How To Use 0-add_interger.py
=============================

This module defines a function that adds ' add_interger(a , b=98)'

Usage:
======
"add_interger" returns the addition of its argument.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3

::

function Works with negative values.

    >>> add_integer(1 , -3)
    -2

::

The function works with floats.

    >>> add_integer(1.2, 1.3)
    2

    >>> add_integer(5, 1.3)
    6

::

Function handles wrong data type (Non-Numbers).

    >>> add_integer("hello", 4)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2.1, "there")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer
    
The function will fail if infinity is provided.

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     


    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

And with NaN numbers.

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer